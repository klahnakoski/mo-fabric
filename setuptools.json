{
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "classifiers": [
        "Programming Language :: Python :: 2.7",
        "Programming Language :: Python :: 3.7",
        "Development Status :: 4 - Beta",
        "Topic :: Software Development :: Libraries",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)"
    ],
    "description": "Thin facade over fabric",
    "include_package_data": true,
    "install_requires": [
                      "fabric2",                "invoke",   "mo-dots>=3.22.19344",
         "mo-files>=3.26.19346", "mo-future>=3.17.19324", "mo-kwargs>=3.20.19344",
          "mo-logs>=3.21.19344",   "mo-math>=3.27.19346"
    ],
    "license": "MPL 2.0",
    "long_description": {
        "$concat": [
            "# mo-fabric",
            "",
            "A facade atop [fabric2](http://www.fabfile.org/)",
            "",
            "## Overview",
            "",
            "I have revisited [Fabric](http://www.fabfile.org/) (September 2018) to find it can handle multiple threads and multiple connections!  This is great news: it makes all my automation faster!",
            "",
            "Like with most APIs, I made a faÃ§ade because Fabric is not congruent to my own programming conventions. This is not bad, just different: The domain I work in is slightly different than what the Fabric developers expect. ",
            "",
            "Here are the differences:",
            "",
            "* All `stdout` and `strerr` from the remote machine is annotated, and shunted, to the local logging module.",
            "* A few convenience methods are added:",
            "  * `conn.exists(path)` - to test if a remote file exists",
            "  * `with conn.warn_only():` - context manager if you do not care if your commands fail",
            "  * `get(remote, local, use_sudo=False)` - allows you to use tilde (`~`) on Windows to refer to home directory",
            "  * `put(local, remote, use_sudo=False)` - similar to `get`, except copies files to remote",
            "  * `sudo(command)` works with the `cd()` context manager",
            "  * `Result.__contains__()` so checking for patterns in command output is simpler:",
            "    ```python",
            "        result = conn.run(\"ls /data1\", warn=True)",
            "        not_found = \"No` such file or directory\" in result",
            "    ```",
            ""
        ],
        "separator": "\n"
    },
    "long_description_content_type": "text/markdown",
    "name": "mo-fabric",
    "packages": ["mo_fabric"],
    "python_requires": "==2.7, >=3.6",
    "url": "https://github.com/klahnakoski/mo-fabric",
    "version": "3.27.19346",
    "zip_safe": false
}